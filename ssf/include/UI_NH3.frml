
// --- Uniformity_index_species_for_faces_or_cells.h ---
// 2D-result-formula for face- or cell-selections that computes the uniformity-index
// of the mass fraction of species INT_species_number over the selection;
// uniformity index = 1.0 - 0.5 * sum_over_all_elements( val_element / val_average - 1.0) * size_element)
//                              / sum_over_all_elements(size_element);
// val_average = sum_over_all_elements( val_element  * size_element) / sum_over_all_elements(size_element);

#define INT_species_number_1 3
#define INT_species_number_2 7

double val[1];
double sizes[1];
double dummy[1];
int dim = 1;
int nElems;

double SpeciesFaceValue(
   int index,
   int offset, // must be INT_species_number-1 !
   double cellScalar[],
   double bndScalar[])
{
   int iFace;
   if(index < NBFAC){ // it is a bnd-face
      return bndScalar[index+offset*NBFAC];
   }else{ // it is an internal face
      iFace = index-NBFAC;
      return    WF[iFace]  * cellScalar[offset*NCELL+LF[iFace][0]-1]
         + (1.0-WF[iFace]) * cellScalar[offset*NCELL+LF[iFace][1]-1];
   }
}




$$init
double val_avg; int i;
if(init){
   nElems = 0;
}else{
   if(divisor == 0.0) return;
   val_avg = sum / divisor;
   if(val_avg == 0.0) return;
   // loop over all visited elements and compute denominator of uniformity ratio
   sum = 0.0;
   for(i = 0; i < nElems; i++) sum += fabs(val[i]/val_avg - 1.0) * sizes[i];
   MPI_SUM_D(sum); // account for MPI
   sum = 1.0 - 0.5 * sum / divisor;
   divisor = 1.0;
}




$$formula
double size;
double value;
if(vol > 0.0){	// this means current element is a cell
   size = vol;
   value = YMFRAC[(INT_species_number_1-1)*NCELL+index] + YMFRAC[(INT_species_number_2-1)*NCELL+index];
}else{ // else it is a face
   size = |n|;
	if(NBFAC>0) {
		value = SpeciesFaceValue(index, INT_species_number_1-1, YMFRAC, YMFRAB)+SpeciesFaceValue(index, INT_species_number_2-1, YMFRAC, YMFRAB);
	} else {
		value = SpeciesFaceValue(index, INT_species_number_1-1, YMFRAC, dummy)+SpeciesFaceValue(index, INT_species_number_2-1, YMFRAC, dummy);
	}
}
if(nElems >= dim){ dim *= 2; resize(val, dim); resize(sizes, dim); }
val[nElems] = value;
sizes[nElems] = size;
nElems++;
// sum up size to divisor and return size * value
divisor += size;
return size * value;
