
////////////////////////////////////////////////////////////////////////////////
//
//
// runningSum_Global.frml
//
// (c) AVL Deutschland GmbH
// author: Carsten Schmalhorst
//
//
////////////////////////////////////////////////////////////////////////////////
// computes the uniformity-index [-] of the array runningSum over a face- or cell-selection;
// uniformity index = 1.0 - 0.5 * sum_over_all_elements(value_element / value_average - 1.0) * size_element)
//                              / sum_over_all_elements(size_element);
// value_average = sum_over_all_elements(value_element  * size_element) / sum_over_all_elements(size_element);
// value_element = runningSum[i]/(t-tstart), i.e. time averaged local NH3+HCNO-molefraction
#define INT_Index_NH3 3
#define INT_Index_HNCO 4

double val[1];
double sizes[1];
int dim = 1;
int nElems;
int off1 = INT_Index_NH3 -1;
int off2 = INT_Index_HNCO -1;









$$init

double val_avg; int i;
double div;
if(init){
   calcRunningSum();
   nElems = 0;
}else{
   if(divisor == 0.0) return;
   val_avg = sum / divisor;
   if(val_avg == 0.0) return;
   // loop over all visited elements and compute denominator of uniformity ratio
   sum = 0.0;div=0;
   for(i = 0; i < nElems; i++) { 
	sum += fabs(val[i]-val_avg) * sizes[i];
	div += val[i]*sizes[i];
   }
   MPI_SUM_D(sum); // account for MPI
   MPI_SUM_D(div);
   sum = 1.0 - 0.5 * sum / div;
   divisor = 1.0;
}









$$formula

double size,value, wgt;
if(tstart==-1)
  return 0.;
if(vol > 0.0){	// this means current element is a cell
   size = vol;
   value = PASPHI[off1*NCELL+index] + PASPHI[off2*NCELL+index];
   wgt = PASPHI[6*NCELL+index];
}else{ // else it is a face
   size = |n|;
	if(index<NBFAC) {
		value = PASPHB[index+off1*NBFAC] + PASPHB[index+off2*NBFAC];
		wgt = PASPHB[index+6*NBFAC];
	} else {
		value = FaceScalar(index-NBFAC, PASPHI[off1*NCELL])+FaceScalar(index-NBFAC, PASPHI[off2*NCELL]);
		wgt = FaceScalar(index-NBFAC, PASPHI[6*NCELL]);
	}
}

size *= wgt;
if(nElems >= dim){ dim *= 2; resize(val, dim); resize(sizes, dim); }
val[nElems] = value;
sizes[nElems] = size;
nElems++;
// sum up size to divisor and return size * value
divisor += size;
return size * value;
