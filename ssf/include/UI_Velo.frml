
// --- Uniformity_index_velocity_for_faces_or_cells.h ---
// computes the uniformity-index [-] of the velocity magnitude over a face- or cell-selection;
// uniformity index = 1.0 - 0.5 * sum_over_all_elements(vel_element / vel_average - 1.0) * size_element)
//                              / sum_over_all_elements(size_element);
// vel_average = sum_over_all_elements(vel_element  * size_element) / sum_over_all_elements(size_element);

double val[1];
double sizes[1];
int dim = 1;
int nElems;

$$init
double val_avg; int i;
if(init){
   nElems = 0;
}else{
   if(divisor == 0.0) return;
   val_avg = sum / divisor;
   if(val_avg == 0.0) return;
   // loop over all visited elements and compute denominator of uniformity ratio
   sum = 0.0;
   for(i = 0; i < nElems; i++) sum += fabs(val[i]/val_avg - 1.0) * sizes[i];
   MPI_SUM_D(sum); // account for MPI
   sum = 1.0 - 0.5 * sum / divisor;
   divisor = 1.0;
}

$$formula
double size;
double value = |v|;
if(vol > 0.0){	// this means current element is a cell
   size = vol;
}else{ // else it is a face
   size = |n|;
}
if(nElems >= dim){ dim *= 2; resize(val, dim); resize(sizes, dim); }
val[nElems] = value;
sizes[nElems] = size;
nElems++;
// sum up size to divisor and return size * value
divisor += size;
return size * value;
