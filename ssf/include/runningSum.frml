
////////////////////////////////////////////////////////////////////////////////
//
//
// runningSum_Global.frml
//
// (c) AVL Deutschland GmbH
// author: Carsten Schmalhorst
//
//
////////////////////////////////////////////////////////////////////////////////

#define REAL_T_START 0
double tstart=-1;
//NO, NO2, NH3, HNCO
int valueCalculated=0;
char check_restart=1;

void USEDEF(int mat, int mph) {
	NUM_PASSCL=7;
	SetUserDef("passcl_names", "Mean_NO_Molefrac;Mean_NO2_Molefrac;Mean_NH3_Molefrac;Mean_HNCO_Molefrac;T_Min;T_Mean;Den_Mean");
}

void USEINI(int mat, int mph) {
  int i;
  if(ITST<1) {
	i=NCELL*NUM_PASSCL;
	while(i--) { PASPHI[i]=0;}
	i=NBFAC*NUM_PASSCL;
	while(i--) { PASPHB[i]=0.;}
	for(i=0;i<NUM_PASSCL;i++) { IOUT_PASSCL[i]=0; ISOL_PASSCL[i]=0; }
//-----------------------01234567890123456789
//	STR_PASSCL[0] = "NO_AvgField";
//	STR_PASSCL[1] = "NO2_AvgField";
//	STR_PASSCL[2] = "NH3_AvgField";
//	STR_PASSCL[3] = "HNCO_AvgField";
//	STR_PASSCL[4] = "T_MIN";
//	STR_PASSCL[5] = "T_AVG";
//	STR_PASSCL[6] = "DEN";
  }
}

void calcRunningSum() {
  int i,k, offset;
  double value;
  int species[4] = {1,2,3,7};
  double delta1;
  double delta2;
  if (!valueCalculated &&tstart!=-1) {
	delta2 = CURRENT_ITC()-tstart;
	delta1 = delta2-DT;
	//Calculate species NO,NO2, NH3 & HNCO
	for(k =0;k<4;k++) {
	        offset = (species[k] - 1) * NCELL;
		for(i = 0;i<NCELL;i++) {
			value = YMOLFR[offset + i];
			PASPHI[k*NCELL+i] = (delta1*PASPHI[k*NCELL+i]+value*DT)/delta2;
		}
	        offset = (species[k] - 1) *NBFAC;
	        for (i = 0; i < NBFAC; i++) {
        	    value = YMOLFB[offset + i];
			PASPHB[k*NBFAC+i] = (delta1*PASPHB[k*NBFAC+i]+value*DT)/delta2;
		}

	}
	for(i=0;i<NCELL;i++) {
		PASPHI[4*NCELL+i] = min(T[i], PASPHI[4*NCELL+i]);
		PASPHI[5*NCELL+i] = (delta1*PASPHI[5*NCELL+i]+T[i]*DT)/delta2;
		PASPHI[6*NCELL+i] = (delta1*PASPHI[6*NCELL+i]+DEN[i]*DT)/delta2;
	}
	for(i=0;i<NBFAC;i++) {
		PASPHB[4*NBFAC+i] = min(TB[i], PASPHB[4*NBFAC+i]);
		PASPHB[5*NBFAC+i] = (delta1*PASPHB[5*NBFAC+i]+TB[i]*DT)/delta2;
		PASPHB[6*NBFAC+i] = (delta1*PASPHB[6*NBFAC+i]+DENB[i]*DT)/delta2;
	}
        valueCalculated = 1;
  }
}


void pl() { print "---------------------------------------------------"; }
$$init
//

$$formula
char buffer[256];int i;
valueCalculated = 0;
for(i=0;i<7;i++) { IOUT_PASSCL[i]=0; ISOL_PASSCL[i]=0; }

//this is a restart on a case that was already used for averaging, but now could have a different start time
//To ensure the correctly requested start time is used, set it!
if(
	t<REAL_T_START && 
	tstart==-1 && 
	RESTA && 
	check_restart
) {
if(IAMPRO<2) {pl();print "check restart";pl();}
		SetUserDef("RunningSum:tstart", "");
		check_restart=0;
}

if(t>=REAL_T_START && tstart==-1) {
	if(RESTA) {
		if (GetUserDef("RunningSum:tstart", buffer) && UserDefLen("RunningSum:tstart")>0) {
			sscanf(buffer, "%lf", tstart);
			if (IAMPRO < 2) {
				pl();pl();
				print "Restarting: t_start=", tstart;
				pl();pl();
			}
		}
		else {
			if (IAMPRO < 2) {
				pl();pl();
				print "WARNING: No inital time averaging data although restarting!!!!";
				pl();pl();
			}
		}
	}
	if (tstart == -1) {
		tstart = t-DT;
		sprintf(buffer, "%g", tstart);
		SetUserDef("RunningSum:tstart", buffer);
		if (IAMPRO < 2) {
			pl();
			print "Starting running sum..., tstart=", tstart;
			pl();
		}
		
		i=NUM_PASSCL*NCELL;
		while(i--) {
			PASPHI[i]=0;
		}

		i=NBFAC*NUM_PASSCL;
		while(i--) { PASPHB[i]=0.;}

		for(i=0;i<NCELL;i++) {
			PASPHI[4*NCELL+i] = 1e10;
		}
		for(i=0;i<NBFAC;i++) {
			PASPHB[4*NBFAC+i]= 1e10;
		}
	}
}
